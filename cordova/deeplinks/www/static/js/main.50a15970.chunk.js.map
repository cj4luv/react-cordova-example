{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDeviceReady","console","log","window","device","cordova","universalLinks","subscribe","eventData","url","setState","data","processData","arr","i","prototype","hasOwnProperty","push","key","renderData","map","item","react_default","a","createElement","state","document","addEventListener","className","style","marginTop","onClick","open","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA2EeA,qBAvEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,cAAgB,WACdC,QAAQC,IAAIC,OAAOC,OAAOC,SAC1BF,OAAOG,eAAeC,UAAU,mBAAoB,SAASC,GAE3DP,QAAQC,IAAI,yCAA2CM,EAAUC,OAEnEhB,EAAKiB,SAAS,CAAEC,KAAMR,OAAOC,UAlBZX,EAqBnBmB,YAAc,SAAAD,GACZV,QAAQC,IAAIS,GACZ,IAAME,EAAM,GACZ,IAAK,IAAIC,KAAKH,EACRjB,OAAOqB,UAAUC,eAAejB,KAAKY,EAAMG,IAC7CD,EAAII,KAAK,CACPC,IAAKJ,EACLH,KAAMA,EAAKG,KAKjB,OADAb,QAAQC,IAAIW,GACLA,GAjCUpB,EAoCnB0B,WAAa,SAAAR,GACX,OAAOA,EAAKS,IAAI,SAAAC,GAAI,OAClBC,EAAAC,EAAAC,cAAA,MAAIN,IAAKG,EAAKH,KACZI,EAAAC,EAAAC,cAAA,UAAKH,EAAKH,KACVI,EAAAC,EAAAC,cAAA,UACwB,mBAAdH,EAAKV,KACTU,EAAKV,KACH,OACA,QACFU,EAAKV,UA1CflB,EAAKgC,MAAQ,CACXd,KAAM,MAJSlB,mFASjBiC,SAASC,iBAAiB,cAAe/B,KAAKI,eAAe,oCAiD7D,OACEsB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UACEK,MAAO,CAAEC,UAAW,KACpBC,QAAS,kBAAM5B,OAAO6B,KAAK,0BAF7B,wBA7DUC,cCSEC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASd,SAASe,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.50a15970.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('deviceready', this.onDeviceReady, false);\n  }\n\n  onDeviceReady = () => {\n    console.log(window.device.cordova);\n    window.universalLinks.subscribe('openNewsListPage', function(eventData) {\n      // do some work\n      console.log('Did launch application from the link: ' + eventData.url);\n    });\n    this.setState({ data: window.device });\n  };\n\n  processData = data => {\n    console.log(data);\n    const arr = [];\n    for (let i in data) {\n      if (Object.prototype.hasOwnProperty.call(data, i)) {\n        arr.push({\n          key: i,\n          data: data[i]\n        });\n      }\n    }\n    console.log(arr);\n    return arr;\n  };\n\n  renderData = data => {\n    return data.map(item => (\n      <ul key={item.key}>\n        <li>{item.key}</li>\n        <li>\n          {typeof item.data === 'boolean'\n            ? item.data\n              ? 'true'\n              : 'false'\n            : item.data}\n        </li>\n      </ul>\n    ));\n  };\n\n  render() {\n    // const { data } = this.state;\n    //\n    // if (!data) return null;\n    //\n    // const res = this.processData(data);\n\n    return (\n      <div className=\"App\">\n        <button\n          style={{ marginTop: 100 }}\n          onClick={() => window.open('https://m.naver.com/')}\n        >\n          웹뷰\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}